diff --git a/forest.cpp b/forest.cpp
index caf6e2b..57be0ae 100644
--- a/forest.cpp
+++ b/forest.cpp
@@ -49,6 +49,9 @@ vector<Forest> mutate(const vector<Forest> &curr) {
   auto valid_end = remove_if(begin(next), end(next), is_invalid);
   stable_sort(begin(next), valid_end);
   next.erase(unique(begin(next), valid_end), end(next));
+  for (auto &f : next) {
+    cout << "Mutated: " << f << endl;
+  }
   return next;
 }

diff --git a/forest.ex b/forest.ex
index 9499782..939e0c6 100755
--- a/forest.ex
+++ b/forest.ex
@@ -18,7 +18,9 @@ defmodule Forest do
   end

   def mutate(xs) do
-    Enum.flat_map(xs, &mutations/1) |> Enum.filter(&is_valid/1) |> Enum.uniq()
+    res = Enum.flat_map(xs, &mutations/1) |> Enum.filter(&is_valid/1) |> Enum.uniq()
+    Enum.each(res, fn(x) -> IO.puts "Mutation: " <> (inspect x) end)
+    res
   end

   def solve(forest) do
diff --git a/forest.f08 b/forest.f08
index cf904b8..f7b5f75 100644
--- a/forest.f08
+++ b/forest.f08
@@ -180,6 +180,10 @@ contains
         next = pack(next, are_valid(next))
         call quicksort(next, 1, size(next))
         call remove_dups(next)
+
+        do i = 1, size(next)
+            print *, next(i)
+        end do
     end function mutate

     function solve(initial) result(solution)
diff --git a/forest.go b/forest.go
index c6f9e20..4e5326e 100644
--- a/forest.go
+++ b/forest.go
@@ -50,6 +50,9 @@ func mutate(forestSet ForestSet) ForestSet {
 			newForestSet[forest] = struct{}{}
 		}
 	}
+	for mutation := range newForestSet {
+		fmt.Println(mutation)
+	}
 	return newForestSet
 }

diff --git a/forest.hs b/forest.hs
index 23fa4a7..56701b2 100644
--- a/forest.hs
+++ b/forest.hs
@@ -2,6 +2,7 @@ module Main where

 import qualified Data.Set as Set
 import System.Environment
+import Debug.Trace

 data Forest = Forest
   { goats  :: !Int
@@ -27,7 +28,7 @@ ordNub l = go Set.empty l
                                       else x : go (Set.insert x s) xs

 mutate :: [Forest] -> [Forest]
-mutate xs = ordNub . filter isValid . concatMap f $ xs
+mutate xs = map traceShowId . ordNub . filter isValid . concatMap f $ xs
   where
     f (Forest g w l) =
       [ Forest (g - 1) (w - 1) (l + 1)
diff --git a/forest.js b/forest.js
index 058b64a..2109c2c 100755
--- a/forest.js
+++ b/forest.js
@@ -23,12 +23,16 @@ var notFirstOrPrevious = function (f, i, ary) {
 };

 var mutate = function (forests) {
-  return forests.reduce(function (acc, f) {
+  let next = forests.reduce(function (acc, f) {
     acc.push(new Forest(f.goats - 1, f.wolves - 1, f.lions + 1));
     acc.push(new Forest(f.goats - 1, f.wolves + 1, f.lions - 1));
     acc.push(new Forest(f.goats + 1, f.wolves - 1, f.lions - 1));
     return acc;
   }, []).filter(isValid).sort(order).filter(notFirstOrPrevious);
+  next.forEach(function (x) {
+    console.log('Mutated', x);
+  });
+  return next;
 };

 var solve = function (forest) {
diff --git a/forest.py b/forest.py
index 85eb5bb..ddbe035 100755
--- a/forest.py
+++ b/forest.py
@@ -16,7 +16,10 @@ def mutate(forests):
         next.append(Forest(f.goats - 1, f.wolves - 1, f.lions + 1))
         next.append(Forest(f.goats - 1, f.wolves + 1, f.lions - 1))
         next.append(Forest(f.goats + 1, f.wolves - 1, f.lions - 1))
-    return set(f for f in next if is_valid(f))
+    res = set(f for f in next if is_valid(f))
+    for x in res:
+        print('Mutated: {}'.format(x))
+    return res

 def solve(forest):
     forests = [forest]
diff --git a/forest.rb b/forest.rb
index 2874102..850dc3f 100755
--- a/forest.rb
+++ b/forest.rb
@@ -32,7 +32,9 @@ def mutate(forests)
     xs.push(Forest.new(f.goats + 1, f.wolves - 1, f.lions - 1))
   end
   ys = xs.keep_if {|f| f.is_valid }
-  ys.uniq {|f| f.to_s }
+  res = ys.uniq {|f| f.to_s }
+  puts res
+  res
 end

 def solve(forest)
diff --git a/forest.rs b/forest.rs
index d0bf774..7a5369c 100644
--- a/forest.rs
+++ b/forest.rs
@@ -25,6 +25,9 @@ fn mutate(forests: Vec<Forest>) -> Vec<Forest> {
     next.retain(is_valid);
     next.sort();
     next.dedup();
+    for x in next.clone() {
+        println!("mutated {:?}", x);
+    }
     next
 }

diff --git a/forest.sc b/forest.sc
index c54cd81..c8a9fec 100644
--- a/forest.sc
+++ b/forest.sc
@@ -22,6 +22,7 @@ object Main {
     var forests = Array(f)
     while (forests.nonEmpty && !forests.exists(Forest.isStable)) {
       forests = mutate(forests)
+      forests.foreach { s => println("Mutation: " + s )}
     }
     forests.filter(Forest.isStable)
   }

diff --git a/forest.sh b/forest.sh
index 68d8377..80df394 100755
--- a/forest.sh
+++ b/forest.sh
@@ -16,6 +16,7 @@ solve() {
   next="$(cat)"
   while [ -n "$next" ] && ! echo "$next" | is_stable; do
     next="$(echo "$next" | mutate | is_valid | sort -u)"
+    echo "$next"
   done
 }

diff --git a/forest.kt b/forest.kt
index 84dc44e..512d44b 100644
--- a/forest.kt
+++ b/forest.kt
@@ -21,6 +21,9 @@ fun solve(f: Forest) : List<Forest> {
   var forests = List<Forest>(1, {f})
   while (forests.any() && !forests.any(Forest::isStable)) {
     forests = mutate(forests)
+    for (fm: Forest in forests) {
+      println("Mutation: ${fm}")
+    }
   }
   return forests.filter(Forest::isStable)
 }

diff --git a/forest.rpy b/forest.rpy
index 7c7acc4..42f5c8c 100755
--- a/forest.rpy
+++ b/forest.rpy
@@ -50,6 +65,8 @@ def solve(forest):
     while any(forests) and not has_stable_forest(forests):
         jitdriver.jit_merge_point(forests=forests)
         forests = mutate(forests)
+        for f in forests:
+            print 'Mutation:', f
     return [f for f in forests if is_stable(f)]
