diff --git a/forest.cpp b/forest.cpp
index a445d88..c60f382 100644
--- a/forest.cpp
+++ b/forest.cpp
@@ -48,6 +48,9 @@ vector<Forest> mutate(const vector<Forest> &curr) {
   auto valid_end = remove_if(begin(next), end(next), is_invalid);
   stable_sort(begin(next), valid_end);
   next.erase(unique(begin(next), valid_end), end(next));
+  for (auto &f : next) {
+    cout << "Mutated: " << f << endl;
+  }
   return next;
 }

diff --git a/forest.ex b/forest.ex
index 9499782..939e0c6 100755
--- a/forest.ex
+++ b/forest.ex
@@ -18,7 +18,9 @@ defmodule Forest do
   end

   def mutate(xs) do
-    Enum.flat_map(xs, &mutations/1) |> Enum.filter(&is_valid/1) |> Enum.uniq()
+    res = Enum.flat_map(xs, &mutations/1) |> Enum.filter(&is_valid/1) |> Enum.uniq()
+    Enum.each(res, fn(x) -> IO.puts "Mutation: " <> (inspect x) end)
+    res
   end

   def solve(forest) do
diff --git a/forest.go b/forest.go
index c93e48e..f7d198e 100644
--- a/forest.go
+++ b/forest.go
@@ -36,6 +36,9 @@ func mutate(forests []Forest) []Forest {
 			next = append(next, k)
 		}
 	}
+	for _, v := range next {
+		fmt.Printf("Mutated: %v\n", v)
+	}
 	return next
 }

diff --git a/forest.hs b/forest.hs
index ac2e18e..67f469b 100644
--- a/forest.hs
+++ b/forest.hs
@@ -1,6 +1,7 @@
 {-# LANGUAGE BangPatterns #-}
 import Data.List
 import System.Environment
+import Debug.Trace

 data Forest = Forest
   { goats :: !Int
@@ -18,7 +19,7 @@ is_valid :: Forest -> Bool
 is_valid (Forest g w l) = g >= 0 && w >= 0 && l >= 0

 mutate :: [Forest] -> [Forest]
-mutate xs = nub . filter is_valid . concatMap f $ xs
+mutate xs = map traceShowId . nub . filter is_valid . concatMap f $ xs
   where f (Forest g w l) = [ Forest (g-1) (w-1) (l+1)
                            , Forest (g-1) (w+1) (l-1)
                            , Forest (g+1) (w-1) (l-1)
diff --git a/forest.js b/forest.js
index 058b64a..2109c2c 100755
--- a/forest.js
+++ b/forest.js
@@ -23,12 +23,16 @@ var notFirstOrPrevious = function (f, i, ary) {
 };

 var mutate = function (forests) {
-  return forests.reduce(function (acc, f) {
+  let next = forests.reduce(function (acc, f) {
     acc.push(new Forest(f.goats - 1, f.wolves - 1, f.lions + 1));
     acc.push(new Forest(f.goats - 1, f.wolves + 1, f.lions - 1));
     acc.push(new Forest(f.goats + 1, f.wolves - 1, f.lions - 1));
     return acc;
   }, []).filter(isValid).sort(order).filter(notFirstOrPrevious);
+  next.forEach(function (x) {
+    console.log('Mutated', x);
+  });
+  return next;
 };

 var solve = function (forest) {
diff --git a/forest.py b/forest.py
index 1681ab5..5c37506 100755
--- a/forest.py
+++ b/forest.py
@@ -32,7 +32,10 @@ def mutate(forests):
         next.append(Forest(f.goats + 1, f.wolves - 1, f.lions - 1))
     # Remove invalids, and sort/dedup by converting to a set
     # This need __hash__ and __eq__ implementations
-    return set(x for x in next if x.is_valid())
+    next = set(x for x in next if x.is_valid())
+    for x in next:
+        print('Mutated: {}'.format(x))
+    return next

 def solve(forest):
     forests = (forest,)
diff --git a/forest.rs b/forest.rs
index e73cc9e..007385a 100644
--- a/forest.rs
+++ b/forest.rs
@@ -34,6 +34,9 @@ fn mutate(forests: Vec<Forest>) -> Vec<Forest> {
     next.retain(|x| x.is_valid());
     next.sort();
     next.dedup();
+    for x in next.clone() {
+        println!("mutated {:?}", x);
+    }
     next
 }

diff --git a/forest.f08 b/forest.f08
index cf904b8..f7b5f75 100644
--- a/forest.f08
+++ b/forest.f08
@@ -180,6 +180,10 @@ contains
         next = pack(next, are_valid(next))
         call quicksort(next, 1, size(next))
         call remove_dups(next)
+
+        do i = 1, size(next)
+            print *, next(i)
+        end do
     end function mutate
 
     function solve(initial) result(solution)
